const express = require('express');
const bodyParser = require('body-parser');
const https = require('https');
const { google } = require('googleapis');
require('dotenv').config();

const TOKEN = '7591593436:AAEgOBitSVUCsvIWw7Y1rMTRXpeKupcJVVg';
const SHEET_NAME = '–õ–∏—Å—Ç1';
const CHANNEL_URL = 'https://t.me/Rentlogin_click';
const SHEET_ID = '1IK-Vx0KI-D0tx_4If34YGOmBgocm9FNwtwoTNPPJtUs';

const app = express();
app.use(bodyParser.json());

const CLIENT_EMAIL = process.env.CLIENT_EMAIL || '';
const PRIVATE_KEY = process.env.PRIVATE_KEY || '';
const auth = new google.auth.GoogleAuth({
  credentials: { 
    client_email: CLIENT_EMAIL, 
    private_key: PRIVATE_KEY.replace(/\\n/g, '\n') 
  },
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});
const sheets = google.sheets({ version: 'v4', auth });

let chatStates = {};

app.post('/', async (req, res) => {
  console.log('Received POST request:', JSON.stringify(req.body));
  try {
    const { message } = req.body;
    if (!message) {
      console.log('No message in request');
      return res.status(400).json({ 
        status: 'error', 
        message: 'Invalid or missing message' 
      });
    }

    const chatId = message.chat?.id;
    const userText = message.text || '';
    const messageId = message.message_id || 0;
    const username = message.from?.username || '';
    const telegramName = `${message.from?.first_name || ''} ${message.from?.last_name || ''}`.trim();

    console.log(`Processing - Chat ID: ${chatId}, Text: ${userText}, Message ID: ${messageId}, Username: @${username}`);

    if (!chatId) {
      console.log('Chat ID is undefined');
      return res.status(400).json({ 
        status: 'error', 
        message: 'Chat ID is undefined' 
      });
    }

    if (!chatStates[chatId]) {
      console.log(`Initializing state for Chat ID: ${chatId}`);
      chatStates[chatId] = { step: 0, responses: {}, messageIds: [] };
    }
    const state = chatStates[chatId];

    // –î–æ–¥–∞—î–º–æ —é–∑–µ—Ä–Ω–µ–π–º —Ç–∞ —ñ–º'—è –∑ Telegram –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    state.responses.telegramUsername = username;
    state.responses.telegramName = telegramName;

    console.log(`Checking step: ${state.step}, userText: "${userText}"`);
    
    // –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
    if (state.step === 0 && userText === '/start') {
      console.log(`Step 0 triggered for ${chatId} with /start`);
      state.step = 0;
      state.responses = {
        telegramUsername: username,
        telegramName: telegramName
      };
      state.messageIds = [];
      
      const welcomeText = 'üéâ –í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ LRconverter!\n' +
        'üë§ –¶–µ–π –±–æ—Ç –∑–±–µ—Ä–µ–∂–µ –≤–∞–∂–ª–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –∑—Ä—É—á–Ω–æ—ó —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—ó —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ.\n' +
        'üîí –ù–µ —Ö–≤–∏–ª—é–π—Å—è ‚Äî —É—Å—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω—ñ –π –Ω–µ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö.\n' +
        'üìù –û—Ç—Ä–∏–º–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ª–∏—à–µ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∫—Ä–∞—â–µ –æ—Ä–≥–∞–Ω—ñ–∑—É–≤–∞—Ç–∏ –Ω–∞—à—É –≤–∑–∞—î–º–æ–¥—ñ—é.\n' +
        '–ù–∞—Ç–∏—Å–Ω–∏ "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", —â–æ–± –ø–æ—á–∞—Ç–∏.';
      
      sendMessageWithButtons(chatId, welcomeText, [['‚úÖ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏']], 'Markdown');
      console.log(`Sent welcome message to ${chatId}`);
      return res.json({ status: 'ok', message: 'Welcome sent' });
    }

    // –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏"
    if (state.step === 0 && userText === '‚úÖ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏') {
      console.log(`User clicked "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏" on ${chatId}, moving to step 1`);
      state.step = 1;
      sendMessage(chatId, 'üë§ 1Ô∏è‚É£/16: –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏? –í–≤–µ–¥–∏ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ.', 'Markdown');
      console.log(`Sent step 1 message to ${chatId}`);
      return res.json({ status: 'ok' });
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    if (messageId > 0 && state.step > 0) {
      state.messageIds.push(messageId);
    }

    // –û–±—Ä–æ–±–∫–∞ –∫—Ä–æ–∫—ñ–≤ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
    switch (state.step) {
      case 1:
        state.responses.name = userText;
        state.step = 2;
        sendMessage(chatId, 'üéÇ 2Ô∏è‚É£/16: –°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.', 'Markdown');
        console.log(`Moved to step 2 for ${chatId}`);
        break;
        
      case 2:
        state.responses.age = userText;
        state.step = 3;
        sendMessage(chatId, 'üè† 3Ô∏è‚É£/16: –£ —è–∫–æ–º—É –º—ñ—Å—Ç—ñ / –∫—Ä–∞—ó–Ω—ñ –∂–∏–≤–µ—à? –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –ö–∏—ó–≤, –£–∫—Ä–∞—ó–Ω–∞.', 'Markdown');
        console.log(`Moved to step 3 for ${chatId}`);
        break;
        
      case 3:
        state.responses.location = userText;
        state.step = 4;
        sendMessage(chatId, 'üíº 4Ô∏è‚É£/16: –£ —è–∫—ñ–π —Å—Ñ–µ—Ä—ñ –ø—Ä–∞—Ü—é—î—à? –ù–∞–ø—Ä–∏–∫–ª–∞–¥, IT, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥.', 'Markdown');
        console.log(`Moved to step 4 for ${chatId}`);
        break;
        
      case 4:
        state.responses.profession = userText;
        state.step = 5;
        sendMessageWithButtons(chatId, 'üîó 5Ô∏è‚É£/16: –ß–∏ –º–∞—î—à –∞–∫–∞—É–Ω—Ç LinkedIn —Å—Ç–∞—Ä—à–µ –∑–∞ 1 —Ä—ñ–∫?', [['‚úÖ –¢–∞–∫'], ['‚ùå –ù—ñ']], 'Markdown');
        console.log(`Moved to step 5 for ${chatId}`);
        break;
        
      case 5:
        state.responses.accountAge = userText;
        state.step = 6;
        sendMessageWithButtons(chatId, 'üì± 6Ô∏è‚É£/16: –ß–∏ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –∞–∫–∞—É–Ω—Ç –¥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É?', [['‚úÖ –¢–∞–∫'], ['‚ùå –ù—ñ']], 'Markdown');
        console.log(`Moved to step 6 for ${chatId}`);
        break;
        
      case 6:
        state.responses.phoneLinked = userText;
        state.step = 7;
        sendMessageWithButtons(chatId, 'üßë‚Äçüíº 7Ô∏è‚É£/16: –ß–∏ –∞–∫–∞—É–Ω—Ç –º—ñ—Å—Ç–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ (—ñ–º'—è, —Ñ–æ—Ç–æ, –¥–æ—Å–≤—ñ–¥)?', [['‚úÖ –¢–∞–∫'], ['‚ùå –ù—ñ']], 'Markdown');
        console.log(`Moved to step 7 for ${chatId}`);
        break;
        
      case 7:
        state.responses.realData = userText;
        state.step = 8;
        sendMessageWithButtons(chatId, 'üì∏ 8Ô∏è‚É£/16: –ß–∏ –≥–æ—Ç–æ–≤–∏–π –ø—Ä–æ–π—Ç–∏ —Å–µ–ª—Ñ—ñ-–≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ?', [['‚úÖ –¢–∞–∫'], ['‚ùå –ù—ñ']], 'Markdown');
        console.log(`Moved to step 8 for ${chatId}`);
        break;
        
      case 8:
        state.responses.selfieReady = userText;
        state.step = 9;
        sendMessageWithButtons(chatId, 'ü™™ 9Ô∏è‚É£/16: –ß–∏ –º–∞—î—à –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Å–æ–±–∏ (–ø–∞—Å–ø–æ—Ä—Ç –∞–±–æ –≤–æ–¥—ñ–π—Å—å–∫–µ)?', [['‚úÖ –¢–∞–∫'], ['‚ùå –ù—ñ']], 'Markdown');
        console.log(`Moved to step 9 for ${chatId}`);
        break;
        
      case 9:
        state.responses.document = userText;
        state.step = 10;
        sendMessageWithButtons(chatId, '‚è≥ 1Ô∏è‚É£0Ô∏è‚É£/16: –ß–∏ –∞–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–Ω–∏–π? –ù–∞–≤—ñ—Ç—å —Ä—ñ–¥–∫–æ.', [['‚úÖ –¢–∞–∫'], ['‚ùå –ù—ñ']], 'Markdown');
        console.log(`Moved to step 10 for ${chatId}`);
        break;
        
      case 10:
        state.responses.active = userText;
        state.step = 11;
        sendMessageWithButtons(chatId, '‚ö†Ô∏è 1Ô∏è‚É£1Ô∏è‚É£/16: –ß–∏ –±—É–ª–∏ –≤–∏–ø–∞–¥–∫–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∞–±–æ –ø—ñ–¥–æ–∑—Ä–∏ –≤ LinkedIn?', [['‚úÖ –¢–∞–∫'], ['‚ùå –ù—ñ']], 'Markdown');
        console.log(`Moved to step 11 for ${chatId}`);
        break;
        
      case 11:
        state.responses.blockHistory = userText;
        state.step = 12;
        sendMessageWithButtons(chatId, 'üìÖ 1Ô∏è‚É£2Ô∏è‚É£/16: –ù–∞ —è–∫–∏–π —Ç–µ—Ä–º—ñ–Ω –≥–æ—Ç–æ–≤–∏–π –∑–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç?', [['–¥–æ 1 –º—ñ—Å'], ['1‚Äì3 –º—ñ—Å'], ['3+ –º—ñ—Å'], ['–ø–æ—Å—Ç—ñ–π–Ω–æ']], 'Markdown');
        console.log(`Moved to step 12 for ${chatId}`);
        break;
        
      case 12:
        state.responses.duration = userText;
        state.step = 13;
        sendMessage(chatId, '‚è±Ô∏è 1Ô∏è‚É£3Ô∏è‚É£/16: –Ø–∫ —à–≤–∏–¥–∫–æ –∑–º–æ–∂–µ—à –Ω–∞–¥–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∞–∫–∞—É–Ω—Ç–∞? –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–∞—Ä–∞–∑, –∑–∞–≤—Ç—Ä–∞.', 'Markdown');
        console.log(`Moved to step 13 for ${chatId}`);
        break;
        
      case 13:
        state.responses.accessSpeed = userText;
        state.step = 14;
        sendMessageWithButtons(chatId, '‚ûï 1Ô∏è‚É£4Ô∏è‚É£/16: –ß–∏ –º–∞—î—à —â–µ –∞–∫–∞—É–Ω—Ç–∏, —è–∫—ñ –º–æ–∂–Ω–∞ –∑–¥–∞—Ç–∏?', [['‚úÖ –¢–∞–∫'], ['‚ùå –ù—ñ']], 'Markdown');
        console.log(`Moved to step 14 for ${chatId}`);
        break;
        
      case 14:
        state.responses.extraAccounts = userText;
        state.step = 15;
        sendMessage(chatId, 'üí¨ 1Ô∏è‚É£5Ô∏è‚É£/16: –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä / –ø–∏—Ç–∞–Ω–Ω—è? –ú–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏.', 'Markdown');
        console.log(`Moved to step 15 for ${chatId}`);
        break;
        
      case 15:
        state.responses.comment = userText;
        state.step = 16;
        
        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Google Sheets
        try {
          await saveToGoogleSheets(state.responses, chatId);
          
          // –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
          for (const msgId of state.messageIds) {
            await sendDeleteMessage(chatId, msgId);
            // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º–∏
            await new Promise(resolve => setTimeout(resolve, 100));
          }
          
          // –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
          await sendDeleteMessage(chatId, messageId);
          
          // –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
          const finalMessage = `‚úÖ 1Ô∏è‚É£6Ô∏è‚É£/16: –î—è–∫—É—é! –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ –∫–∞–Ω–∞–ª—É: [—Ç—É—Ç](${CHANNEL_URL})`;
          sendMessage(chatId, finalMessage, 'Markdown', { remove_keyboard: true });
          
          console.log(`Completed survey and cleared chat history for ${chatId}`);
        } catch (sheetError) {
          console.error('Error saving to Google Sheets:', sheetError);
          sendMessage(chatId, '‚úÖ 1Ô∏è‚É£6Ô∏è‚É£/16: –î—è–∫—É—é! –î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ. –ó–≤—è–∂–µ–º–æ—Å—è –∑ —Ç–æ–±–æ—é –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.', 'Markdown', { remove_keyboard: true });
        }
        
        // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        delete chatStates[chatId];
        break;
    }

    return res.json({ status: 'ok' });
  } catch (error) {
    console.error('Error:', error.toString());
    return res.status(500).json({ status: 'error', message: error.toString() });
  }
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Google Sheets –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ø–æ—Ä—è–¥–∫–æ–º –∫–æ–ª–æ–Ω–æ–∫
async function saveToGoogleSheets(responses, chatId) {
  try {
    const values = [
      [
        new Date().toISOString(), // A - Timestamp
        responses.name || '', // B - –Ü–º'—è
        responses.age || '', // C - –í—ñ–∫
        responses.location || '', // D - –ú—ñ—Å—Ç–æ
        responses.telegramUsername ? `@${responses.telegramUsername}` : '', // E - Telegram
        responses.profession || '', // F - –ü—Ä–æ—Ñ–µ—Å—ñ—è
        responses.accountAge || '', // G - –°—Ç–∞–∂ –∞–∫–∞—É–Ω—Ç—É
        responses.phoneLinked || '', // H - –ü—Ä–∏–≤'—è–∑–∫–∞ –¥–æ –Ω–æ–º–µ—Ä–∞
        responses.realData || '', // I - –†–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
        responses.selfieReady || '', // J - –ì–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –¥–æ —Å–µ–ª—Ñ—ñ
        responses.document || '', // K - –î–æ–∫—É–º–µ–Ω—Ç
        responses.active || '', // L - –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        responses.blockHistory || '', // M - –Ü—Å—Ç–æ—Ä—ñ—è –±–ª–æ–∫—É–≤–∞–Ω—å
        responses.duration || '', // N - –¢–µ—Ä–º—ñ–Ω
        responses.accessSpeed || '', // O - –ì–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –∑–¥–∞—Ç–∏
        responses.extraAccounts || '', // P - –Ü–Ω—à—ñ –∞–∫–∞—É–Ω—Ç–∏
        responses.comment || '' // Q - –ö–æ–º–µ–Ω—Ç–∞—Ä
      ]
    ];

    await sheets.spreadsheets.values.append({
      spreadsheetId: SHEET_ID,
      range: `${SHEET_NAME}!A:Q`,
      valueInputOption: 'RAW',
      requestBody: { values }
    });

    console.log(`Data saved to Google Sheets for chat ${chatId}`);
  } catch (error) {
    console.error('Google Sheets error:', error);
    throw error;
  }
}

function sendMessage(chatId, text, parseMode = 'Markdown', replyMarkup = {}) {
  console.log(`Sending message to ${chatId}: ${text}`);
  const url = `https://api.telegram.org/bot${TOKEN}/sendMessage`;
  const payload = { 
    chat_id: chatId, 
    text, 
    parse_mode: parseMode,
    reply_markup: replyMarkup
  };
  
  const req = https.request(url, { 
    method: 'POST', 
    headers: { 'Content-Type': 'application/json' } 
  }, (res) => {
    let data = '';
    res.on('data', (chunk) => data += chunk);
    res.on('end', () => console.log(`Response from Telegram: ${data}`));
  });
  
  req.on('error', (err) => console.error(`Telegram error: ${err.message}`));
  req.end(JSON.stringify(payload));
}

function sendMessageWithButtons(chatId, text, buttons, parseMode = 'Markdown') {
  console.log(`Sending message with buttons to ${chatId}: ${text}`);
  const url = `https://api.telegram.org/bot${TOKEN}/sendMessage`;
  const payload = {
    chat_id: chatId,
    text,
    parse_mode: parseMode,
    reply_markup: {
      keyboard: buttons,
      one_time_keyboard: true,
      resize_keyboard: true,
    },
  };
  
  const req = https.request(url, { 
    method: 'POST', 
    headers: { 'Content-Type': 'application/json' } 
  }, (res) => {
    let data = '';
    res.on('data', (chunk) => data += chunk);
    res.on('end', () => console.log(`Response from Telegram: ${data}`));
  });
  
  req.on('error', (err) => console.error(`Telegram error: ${err.message}`));
  req.end(JSON.stringify(payload));
}

function sendDeleteMessage(chatId, messageId) {
  return new Promise((resolve, reject) => {
    console.log(`Deleting message ${messageId} from ${chatId}`);
    const url = `https://api.telegram.org/bot${TOKEN}/deleteMessage`;
    
    const req = https.request(url, { 
      method: 'POST', 
      headers: { 'Content-Type': 'application/json' } 
    }, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        console.log(`Delete response: ${data}`);
        resolve(data);
      });
    });
    
    req.on('error', (err) => {
      console.error(`Delete message error: ${err.message}`);
      reject(err);
    });
    
    req.end(JSON.stringify({ chat_id: chatId, message_id: messageId }));
  });
}

const PORT = process.env.PORT || 10000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
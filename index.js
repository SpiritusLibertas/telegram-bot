const express = require('express');
const bodyParser = require('body-parser');
const https = require('https');
const { google } = require('googleapis');
require('dotenv').config();
const TOKEN = '7591593436:AAEgOBitSVUCsvIWw7Y1rMTRXpeKupcJVVg';
const SHEET_NAME = '–õ–∏—Å—Ç1';
const CHANNEL_URL = 'https://t.me/Rentlogin_click';
const SHEET_ID = '1IK-Vx0KI-D0tx_4If34YGOmBgocm9FNwtwoTNPPJtUs';

const app = express();
app.use(bodyParser.json());

const CLIENT_EMAIL = process.env.CLIENT_EMAIL || '';
const PRIVATE_KEY = process.env.PRIVATE_KEY || '';
const auth = new google.auth.GoogleAuth({
  credentials: { client_email: CLIENT_EMAIL, private_key: PRIVATE_KEY.replace(/\\n/g, '\n') },
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});
const sheets = google.sheets({ version: 'v4', auth });

let chatStates = {};

app.post('/', async (req, res) => {
  console.log('Received POST request:', JSON.stringify(req.body));
  try {
    const { message } = req.body;
    if (!message) {
      console.log('No message in request');
      return res.status(400).json({ status: 'error', message: 'Invalid or missing message' });
    }

    const chatId = message.chat?.id;
    const userText = message.text || '';
    const messageId = message.message_id || 0;

    console.log(`Processing - Chat ID: ${chatId}, Text: ${userText}, Message ID: ${messageId}`);

    if (!chatId) {
      console.log('Chat ID is undefined');
      return res.status(400).json({ status: 'error', message: 'Chat ID is undefined' });
    }

    if (!chatStates[chatId]) {
      console.log(`Initializing state for Chat ID: ${chatId}`);
      chatStates[chatId] = { step: 0, responses: {}, messageIds: [] };
    }
    const state = chatStates[chatId];

    console.log(`Checking step: ${state.step}, userText: "${userText}"`);
    if (state.step === 0 && userText === '/start') {
      console.log(`Step 0 triggered for ${chatId} with /start`);
      state.step = 0;
      state.responses = {};
      state.messageIds = [];
      sendMessageWithButtons(chatId,
        'üéâ *–í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ LRconverter!*\n' +
        'üë§ –¶–µ–π –±–æ—Ç –∑–±–µ—Ä–µ–∂–µ –≤–∞–∂–ª–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –∑—Ä—É—á–Ω–æ—ó —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—ó —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ.\n' +
        'üîí –ù–µ —Ö–≤–∏–ª—é–π—Å—è ‚Äî —É—Å—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω—ñ –π –Ω–µ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö.\n' +
        'üìù –û—Ç—Ä–∏–º–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ª–∏—à–µ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∫—Ä–∞—â–µ –æ—Ä–≥–∞–Ω—ñ–∑—É–≤–∞—Ç–∏ –Ω–∞—à—É –≤–∑–∞—î–º–æ–¥—ñ—é.\n' +
        '_–ù–∞—Ç–∏—Å–Ω–∏ "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", —â–æ–± –ø–æ—á–∞—Ç–∏._',
        [['‚úÖ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏']], 'Markdown');
      console.log(`Sent welcome message to ${chatId}`);
      return res.json({ status: 'ok', message: 'Welcome sent' });
    }

    // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∑ –µ–º–æ–¥–∑—ñ
    if (state.step === 0 && (userText === '‚úÖ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏' || userText === '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏')) {
      console.log(`User clicked "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏" on ${chatId}, moving to step 1`);
      state.step = 1;
      sendMessage(chatId, 'üë§ *1Ô∏è‚É£/16: –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?* _–í–≤–µ–¥–∏ —ñ–º º—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ._', 'Markdown');
      console.log(`Sent step 1 message to ${chatId}`);
      return res.json({ status: 'ok' });
    }

    switch (state.step) {
      case 1:
        state.responses.name = userText;
        state.step = 2;
        sendMessage(chatId, 'üéÇ *2Ô∏è‚É£/16: –°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?* _–í–≤–µ–¥–∏ —á–∏—Å–ª–æ._', 'Markdown');
        console.log(`Moved to step 2 for ${chatId}`);
        break;
      case 2:
        state.responses.age = userText;
        state.step = 3;
        sendMessage(chatId, 'üìß *3Ô∏è‚É£/16: –Ø–∫–∏–π —É —Ç–µ–±–µ email?* _–í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å—É._', 'Markdown');
        console.log(`Moved to step 3 for ${chatId}`);
        break;
      case 3:
        state.responses.email = userText;
        state.step = 4;
        sendMessage(chatId, 'üìû *4Ô∏è‚É£/16: –Ø–∫–∏–π —É —Ç–µ–±–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É?* _–í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX._', 'Markdown');
        console.log(`Moved to step 4 for ${chatId}`);
        break;
      case 4:
        state.responses.phone = userText;
        state.step = 5;
        sendMessage(chatId, 'üè† *5Ô∏è‚É£/16: –î–µ —Ç–∏ –∂–∏–≤–µ—à?* _–í–≤–µ–¥–∏ –º—ñ—Å—Ç–æ –∞–±–æ —Ä–µ–≥—ñ–æ–Ω._', 'Markdown');
        console.log(`Moved to step 5 for ${chatId}`);
        break;
      case 5:
        state.responses.location = userText;
        state.step = 6;
        sendMessage(chatId, 'üíº *6Ô∏è‚É£/16: –Ø–∫–æ—é —î —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—ñ—è?* _–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É._', 'Markdown');
        console.log(`Moved to step 6 for ${chatId}`);
        break;
      case 6:
        state.responses.profession = userText;
        state.step = 7;
        sendMessage(chatId, '‚è∞ *7Ô∏è‚É£/16: –°–∫—ñ–ª—å–∫–∏ –≥–æ–¥–∏–Ω –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å —Ç–∏ –º–æ–∂–µ—à –ø—Ä–∞—Ü—é–≤–∞—Ç–∏?* _–í–≤–µ–¥–∏ —á–∏—Å–ª–æ._', 'Markdown');
        console.log(`Moved to step 7 for ${chatId}`);
        break;
      case 7:
        state.responses.workHours = userText;
        state.step = 8;
        sendMessage(chatId, 'üí∞ *8Ô∏è‚É£/16: –Ø–∫–∏–π —Ç–≤—ñ–π –±–∞–∂–∞–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Ö–æ–¥—É?* _–í–≤–µ–¥–∏ —Å—É–º—É –≤ –≥—Ä–Ω._', 'Markdown');
        console.log(`Moved to step 8 for ${chatId}`);
        break;
      case 8:
        state.responses.income = userText;
        state.step = 9;
        sendMessage(chatId, 'üåê *9Ô∏è‚É£/16: –ß–∏ –º–∞—î—à —Ç–∏ –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ –æ–Ω–ª–∞–π–Ω?* _–¢–∞–∫/–ù—ñ._', 'Markdown');
        console.log(`Moved to step 9 for ${chatId}`);
        break;
      case 9:
        state.responses.onlineExp = userText;
        state.step = 10;
        sendMessage(chatId, 'üíª *üîü/16: –Ø–∫—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —á–∏ –ø—Ä–æ–≥—Ä–∞–º–∏ —Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à?* _–í–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫._', 'Markdown');
        console.log(`Moved to step 10 for ${chatId}`);
        break;
      case 10:
        state.responses.tools = userText;
        state.step = 11;
        sendMessage(chatId, 'üéØ *1Ô∏è‚É£1Ô∏è‚É£/16: –Ø–∫—ñ —Ç–≤–æ—ó —Å–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏?* _–í–≤–µ–¥–∏ 2-3 –ø—É–Ω–∫—Ç–∏._', 'Markdown');
        console.log(`Moved to step 11 for ${chatId}`);
        break;
      case 11:
        state.responses.strengths = userText;
        state.step = 12;
        sendMessage(chatId, '‚ùì *1Ô∏è‚É£2Ô∏è‚É£/16: –ß–∏ —î —É —Ç–µ–±–µ –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—ñ?* _–¢–∞–∫/–ù—ñ, –æ–ø–∏—à–∏._', 'Markdown');
        console.log(`Moved to step 12 for ${chatId}`);
        break;
      case 12:
        state.responses.teamExp = userText;
        state.step = 13;
        sendMessage(chatId, 'üìÖ *1Ô∏è‚É£3Ô∏è‚É£/16: –Ø–∫–∏–π —Ç–≤—ñ–π –≥—Ä–∞—Ñ—ñ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ?* _–í–≤–µ–¥–∏ –¥–Ω—ñ —á–∏ –≥–æ–¥–∏–Ω–∏._', 'Markdown');
        console.log(`Moved to step 13 for ${chatId}`);
        break;
      case 13:
        state.responses.schedule = userText;
        state.step = 14;
        sendMessage(chatId, 'üåü *1Ô∏è‚É£4Ô∏è‚É£/16: –ß–∏ —î —É —Ç–µ–±–µ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ —á–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ —Ä–æ–±—ñ—Ç?* _–¢–∞–∫/–ù—ñ, –¥–æ–¥–∞–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è._', 'Markdown');
        console.log(`Moved to step 14 for ${chatId}`);
        break;
      case 14:
        state.responses.portfolio = userText;
        state.step = 15;
        sendMessage(chatId, 'ü§ù *1Ô∏è‚É£5Ô∏è‚É£/16: –ß–∏ –∑–≥–æ–¥–µ–Ω —Ç–∏ –∑ —É–º–æ–≤–∞–º–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ?* _–¢–∞–∫/–ù—ñ._', 'Markdown');
        console.log(`Moved to step 15 for ${chatId}`);
        break;
      case 15:
        state.responses.agreement = userText;
        state.step = 16;
        
        // –î–æ–¥–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Google Sheets
        try {
          await saveToGoogleSheets(state.responses, chatId);
          sendMessage(chatId, '‚úÖ *1Ô∏è‚É£6Ô∏è‚É£/16: –î—è–∫—É—é! –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –û—á—ñ–∫—É–π –Ω–∞ –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫.*', 'Markdown');
        } catch (sheetError) {
          console.error('Error saving to Google Sheets:', sheetError);
          sendMessage(chatId, '‚úÖ *1Ô∏è‚É£6Ô∏è‚É£/16: –î—è–∫—É—é! –î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ. –ó–≤'—è–∂–µ–º–æ—Å—è –∑ —Ç–æ–±–æ—é –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.*', 'Markdown');
        }
        
        console.log(`Completed survey for ${chatId}`);
        // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        delete chatStates[chatId];
        break;
    }

    if (state.step > 0 && state.step < 15) {
      if (messageId > 0) state.messageIds.push(messageId);
    }

    return res.json({ status: 'ok' });
  } catch (error) {
    console.error('Error:', error.toString());
    return res.status(500).json({ status: 'error', message: error.toString() });
  }
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Google Sheets
async function saveToGoogleSheets(responses, chatId) {
  try {
    const values = [
      [
        new Date().toISOString(),
        chatId,
        responses.name || '',
        responses.age || '',
        responses.email || '',
        responses.phone || '',
        responses.location || '',
        responses.profession || '',
        responses.workHours || '',
        responses.income || '',
        responses.onlineExp || '',
        responses.tools || '',
        responses.strengths || '',
        responses.teamExp || '',
        responses.schedule || '',
        responses.portfolio || '',
        responses.agreement || ''
      ]
    ];

    await sheets.spreadsheets.values.append({
      spreadsheetId: SHEET_ID,
      range: `${SHEET_NAME}!A:Q`,
      valueInputOption: 'RAW',
      requestBody: { values }
    });

    console.log(`Data saved to Google Sheets for chat ${chatId}`);
  } catch (error) {
    console.error('Google Sheets error:', error);
    throw error;
  }
}

function sendMessage(chatId, text, parseMode = 'Markdown') {
  console.log(`Sending message to ${chatId}: ${text}`);
  const url = `https://api.telegram.org/bot${TOKEN}/sendMessage`;
  const payload = { chat_id: chatId, text, parse_mode: parseMode };
  const req = https.request(url, { method: 'POST', headers: { 'Content-Type': 'application/json' } }, (res) => {
    let data = '';
    res.on('data', (chunk) => data += chunk);
    res.on('end', () => console.log(`Response from Telegram: ${data}`));
  });
  req.on('error', (err) => console.error(`Telegram error: ${err.message}`));
  req.end(JSON.stringify(payload));
}

function sendMessageWithButtons(chatId, text, buttons, parseMode = 'Markdown') {
  console.log(`Sending message with buttons to ${chatId}: ${text}`);
  const url = `https://api.telegram.org/bot${TOKEN}/sendMessage`;
  const payload = {
    chat_id: chatId,
    text,
    parse_mode: parseMode,
    reply_markup: {
      keyboard: buttons,
      one_time_keyboard: true,
      resize_keyboard: true,
    },
  };
  const req = https.request(url, { method: 'POST', headers: { 'Content-Type': 'application/json' } }, (res) => {
    let data = '';
    res.on('data', (chunk) => data += chunk);
    res.on('end', () => console.log(`Response from Telegram: ${data}`));
  });
  req.on('error', (err) => console.error(`Telegram error: ${err.message}`));
  req.end(JSON.stringify(payload));
}

function sendDeleteMessage(chatId, messageId) {
  console.log(`Deleting message ${messageId} from ${chatId}`);
  const url = `https://api.telegram.org/bot${TOKEN}/deleteMessage`;
  const req = https.request(url, { method: 'POST', headers: { 'Content-Type': 'application/json' } }, (res) => {
    res.on('data', () => {});
  });
  req.on('error', (err) => console.error(`Delete message error: ${err.message}`));
  req.end(JSON.stringify({ chat_id: chatId, message_id: messageId }));
}

const PORT = process.env.PORT || 10000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
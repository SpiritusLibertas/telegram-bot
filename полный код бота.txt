function doPost(e) {
  Logger.log('doPost started, e: ' + JSON.stringify(e));
  if (!e || !e.postData || !e.postData.contents) {
    Logger.log('Invalid or missing postData: ' + (e ? JSON.stringify(e) : 'null'));
    return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: 'Invalid or missing postData' }))
      .setMimeType(ContentService.MimeType.JSON);
  }

  try {
    Logger.log('Parsing postData: ' + e.postData.contents);
    const data = JSON.parse(e.postData.contents);
    const msg = data.message || {};
    const chatId = msg.chat ? msg.chat.id : null;
    const userText = msg.text || '';
    const messageId = msg.message_id || 0;
    Logger.log('Parsed - Chat ID: ' + chatId + ', Text: ' + userText + ', Message ID: ' + messageId);
    if (!chatId) {
      Logger.log('Chat ID is null, skipping message send. Full data: ' + JSON.stringify(data));
      return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: 'Chat ID is undefined' }))
        .setMimeType(ContentService.MimeType.JSON);
    }
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_NAME);
    Logger.log('Sheet accessed: ' + SHEET_NAME);
    const props = PropertiesService.getScriptProperties();
    Logger.log('Properties accessed');

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    let messageIds = JSON.parse(props.getProperty(`messageIds_${chatId}`) || '[]');
    messageIds.push(messageId);
    props.setProperty(`messageIds_${chatId}`, JSON.stringify(messageIds));

    let step = parseInt(props.getProperty(chatId)) || 0;
    let responses = JSON.parse(props.getProperty(`data_${chatId}`) || '{}');
    Logger.log('Current step: ' + step + ', Responses: ' + JSON.stringify(responses));

    // –ü–µ—Ä—à–∏–π –≤—Ö—ñ–¥ –∞–±–æ —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É
    if (step === 0 && !userText) {
      Logger.log('First entry or no command, showing welcome message');
      props.deleteProperty(chatId);
      props.deleteProperty(`data_${chatId}`);
      props.deleteProperty(`messageIds_${chatId}`);
      const response = sendMessageWithButtons(chatId, 
        'üéâ *–í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ LRconverter!*\n' +
        'üë§ –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–∞–≥–∞—î –º–µ–Ω—ñ –∑—ñ–±—Ä–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤—ñ–¥ —Ç–∏—Ö, –∑ –∫–∏–º —è —Å–ø—ñ–≤–ø—Ä–∞—Ü—é—é.\n' +
        'üîí *–ó–∞–ø–µ–≤–Ω—è—é:* –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω—ñ —Ç–∞ –Ω–µ –≤–∏—Ç—è–≥—É—é—Ç—å –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö!\n' +
        'üìù –¢–≤–æ—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏.\n' +
        '_–ù–∞—Ç–∏—Å–Ω–∏ "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", —â–æ–± –ø–æ—á–∞—Ç–∏._', 
        [['‚úÖ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏']], 'Markdown');
      if (response) {
        const sentMessageId = JSON.parse(response.getContentText()).result.message_id;
        messageIds = [sentMessageId];
        props.setProperty(`messageIds_${chatId}`, JSON.stringify(messageIds));
      }
      props.setProperty(chatId, '0');
      return;
    }

    // –û–±—Ä–æ–±–∫–∞ –∫—Ä–æ–∫–∞ 0 (–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
    if (step === 0) {
      if (userText === '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏') {
        Logger.log('User pressed "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", moving to step 1');
        props.setProperty(chatId, '1'); // –û–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–æ–∫ –¥–æ 1
        const response = sendMessage(chatId, 'üë§ *1Ô∏è‚É£/16: –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?* _–í–≤–µ–¥–∏ —ñ–º‚Äô—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ._', false, 'Markdown');
        if (response) {
          const sentMessageId = JSON.parse(response.getContentText()).result.message_id;
          messageIds.push(sentMessageId);
          props.setProperty(`messageIds_${chatId}`, JSON.stringify(messageIds));
        }
        return; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
      } else {
        Logger.log('User did not press "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", repeating welcome message');
        const response = sendMessageWithButtons(chatId, 
          'üéâ *–í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ LRconverter!*\n' +
          'üë§ –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–∞–≥–∞—î –º–µ–Ω—ñ –∑—ñ–±—Ä–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤—ñ–¥ —Ç–∏—Ö, –∑ –∫–∏–º —è —Å–ø—ñ–≤–ø—Ä–∞—Ü—é—é.\n' +
          'üîí *–ó–∞–ø–µ–≤–Ω—è—é:* –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω—ñ —Ç–∞ –Ω–µ –≤–∏—Ç—è–≥—É—é—Ç—å –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö!\n' +
          'üìù –¢–≤–æ—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏.\n' +
          '_–ù–∞—Ç–∏—Å–Ω–∏ "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", —â–æ–± –ø–æ—á–∞—Ç–∏._', 
          [['‚úÖ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏']], 'Markdown');
        if (response) {
          const sentMessageId = JSON.parse(response.getContentText()).result.message_id;
          messageIds.push(sentMessageId);
          props.setProperty(`messageIds_${chatId}`, JSON.stringify(messageIds));
        }
        return;
      }
    }

    switch (step) {
      case 1: 
        responses.name = userText; 
        const response1 = sendMessage(chatId, 'üéÇ *2Ô∏è‚É£/16: –°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?* _–í–≤–µ–¥–∏ —á–∏—Å–ª–æ._', false, 'Markdown'); 
        const sentMessageId1 = response1 ? JSON.parse(response1.getContentText()).result.message_id : null;
        if (sentMessageId1) messageIds.push(sentMessageId1);
        props.setProperty(`messageIds_${chatId}`, JSON.stringify(messageIds));
        break;
      case 2: 
        responses.age = userText; 
        const response2 = sendMessage(chatId, 'üåç *3Ô∏è‚É£/16: –£ —è–∫–æ–º—É –º—ñ—Å—Ç—ñ / –∫—Ä–∞—ó–Ω—ñ –∂–∏–≤–µ—à?* _–ù–∞–ø—Ä–∏–∫–ª–∞–¥, –ö–∏—ó–≤, –£–∫—Ä–∞—ó–Ω–∞._', false, 'Markdown'); 
        const sentMessageId2 = response2 ? JSON.parse(response2.getContentText()).result.message_id : null;
        if (sentMessageId2) messageIds.push(sentMessageId2);
        props.setProperty(`messageIds_${chatId}`, JSON.stringify(messageIds));
        break;
      case 3: 
        responses.city = userText; 
        responses.telegram = `@${msg.from.username || '–Ω–µ–º–∞—î'}`; 
        const response3 = sendMessage(chatId, 'üíº *4Ô∏è‚É£/16: –£ —è–∫—ñ–π —Å—Ñ–µ—Ä—ñ –ø—Ä–∞—Ü—é—î—à?* _–ù–∞–ø—Ä–∏–∫–ª–∞–¥, IT, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥._', false, 'Markdown'); 
        const sentMessageId3 = response3 ? JSON.parse(response3.getContentText()).result.message_id : null;
        if (sentMessageId3) messageIds.push(sentMessageId3);
        props.setProperty(`messageIds_${chatId}`, JSON.stringify(messageIds));
        break;
      case 4: 
        responses.profession = userText; 
        const response4 = sendMessageWithButtons(chatId, 'üìÖ *5Ô∏è‚É£/16: –ß–∏ –º–∞—î—à –∞–∫–∞—É–Ω—Ç LinkedIn —Å—Ç–∞—Ä—à–µ –∑–∞ 1 —Ä—ñ–∫?*', [['‚úÖ –¢–∞–∫'], ['‚ùå –ù—ñ']], 'Markdown'); 
        const sentMessageId4 = response4 ? JSON.parse(response4.getContentText()).result.message_id : null;
        if (sentMessageId4) messageIds.push(sentMessageId4);
        props.setProperty(`messageIds_${chatId}`, JSON.stringify(messageIds));
        break;
      case 5: 
        responses.ageOfAcc = userText; 
        const response5 = sendMessageWithButtons(chatId, 'üì± *6Ô∏è‚É£/16: –ß–∏ –ø—Ä–∏–≤‚Äô—è–∑–∞–Ω–∏–π –∞–∫–∞—É–Ω—Ç –¥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É?*', [['‚úÖ –¢–∞–∫'], ['‚ùå –ù—ñ']], 'Markdown'); 
        const sentMessageId5 = response5 ? JSON.parse(response5.getContentText()).result.message_id : null;
        if (sentMessageId5) messageIds.push(sentMessageId5);
        props.setProperty(`messageIds_${chatId}`, JSON.stringify(messageIds));
        break;
      case 6: 
        responses.phoneLinked = userText; 
        const response6 = sendMessageWithButtons(chatId, 'ü™™ *7Ô∏è‚É£/16: –ß–∏ –∞–∫–∞—É–Ω—Ç –º—ñ—Å—Ç–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ (—ñ–º‚Äô—è, —Ñ–æ—Ç–æ, –¥–æ—Å–≤—ñ–¥)?*', [['‚úÖ –¢–∞–∫'], ['‚ùå –ù—ñ']], 'Markdown'); 
        const sentMessageId6 = response6 ? JSON.parse(response6.getContentText()).result.message_id : null;
        if (sentMessageId6) messageIds.push(sentMessageId6);
        props.setProperty(`messageIds_${chatId}`, JSON.stringify(messageIds));
        break;
      case 7: 
        responses.realData = userText; 
        const response7 = sendMessageWithButtons(chatId, 'üì∑ *8Ô∏è‚É£/16: –ß–∏ –≥–æ—Ç–æ–≤–∏–π –ø—Ä–æ–π—Ç–∏ —Å–µ–ª—Ñ—ñ-–≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ?*', [['‚úÖ –¢–∞–∫'], ['‚ùå –ù—ñ']], 'Markdown'); 
        const sentMessageId7 = response7 ? JSON.parse(response7.getContentText()).result.message_id : null;
        if (sentMessageId7) messageIds.push(sentMessageId7);
        props.setProperty(`messageIds_${chatId}`, JSON.stringify(messageIds));
        break;
      case 8: 
        responses.selfie = userText; 
        const response8 = sendMessageWithButtons(chatId, 'üõÇ *9Ô∏è‚É£/16: –ß–∏ –º–∞—î—à –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Å–æ–±–∏ (–ø–∞—Å–ø–æ—Ä—Ç –∞–±–æ –≤–æ–¥—ñ–π—Å—å–∫–µ)?*', [['‚úÖ –¢–∞–∫'], ['‚ùå –ù—ñ']], 'Markdown'); 
        const sentMessageId8 = response8 ? JSON.parse(response8.getContentText()).result.message_id : null;
        if (sentMessageId8) messageIds.push(sentMessageId8);
        props.setProperty(`messageIds_${chatId}`, JSON.stringify(messageIds));
        break;
      case 9: 
        responses.doc = userText; 
        const response9 = sendMessageWithButtons(chatId, 'üì° *üîü/16: –ß–∏ –∞–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–Ω–∏–π?* _–ù–∞–≤—ñ—Ç—å —Ä—ñ–¥–∫–æ._', [['‚úÖ –¢–∞–∫'], ['‚ùå –ù—ñ']], 'Markdown'); 
        const sentMessageId9 = response9 ? JSON.parse(response9.getContentText()).result.message_id : null;
        if (sentMessageId9) messageIds.push(sentMessageId9);
        props.setProperty(`messageIds_${chatId}`, JSON.stringify(messageIds));
        break;
      case 10: 
        responses.active = userText; 
        const response10 = sendMessageWithButtons(chatId, 'üö´ *1Ô∏è‚É£1Ô∏è‚É£/16: –ß–∏ –±—É–ª–∏ –≤–∏–ø–∞–¥–∫–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∞–±–æ –ø—ñ–¥–æ–∑—Ä–∏ –≤ LinkedIn?*', [['‚úÖ –¢–∞–∫'], ['‚ùå –ù—ñ']], 'Markdown'); 
        const sentMessageId10 = response10 ? JSON.parse(response10.getContentText()).result.message_id : null;
        if (sentMessageId10) messageIds.push(sentMessageId10);
        props.setProperty(`messageIds_${chatId}`, JSON.stringify(messageIds));
        break;
      case 11: 
        responses.blocked = userText; 
        const response11 = sendMessageWithButtons(chatId, '‚è∞ *1Ô∏è‚É£2Ô∏è‚É£/16: –ù–∞ —è–∫–∏–π —Ç–µ—Ä–º—ñ–Ω –≥–æ—Ç–æ–≤–∏–π –∑–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç?*', [['üìÖ –¥–æ 1 –º—ñ—Å'], ['üïí 1‚Äì3 –º—ñ—Å'], ['‚è≥ 3+ –º—ñ—Å'], ['üîÑ –ø–æ—Å—Ç—ñ–π–Ω–æ']], 'Markdown'); 
        const sentMessageId11 = response11 ? JSON.parse(response11.getContentText()).result.message_id : null;
        if (sentMessageId11) messageIds.push(sentMessageId11);
        props.setProperty(`messageIds_${chatId}`, JSON.stringify(messageIds));
        break;
      case 12: 
        responses.duration = userText; 
        const response12 = sendMessage(chatId, '‚ö° *1Ô∏è‚É£3Ô∏è‚É£/16: –Ø–∫ —à–≤–∏–¥–∫–æ –∑–º–æ–∂–µ—à –Ω–∞–¥–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∞–∫–∞—É–Ω—Ç–∞?* _–ù–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–∞—Ä–∞–∑, –∑–∞–≤—Ç—Ä–∞._', false, 'Markdown'); 
        const sentMessageId12 = response12 ? JSON.parse(response12.getContentText()).result.message_id : null;
        if (sentMessageId12) messageIds.push(sentMessageId12);
        props.setProperty(`messageIds_${chatId}`, JSON.stringify(messageIds));
        break;
      case 13: 
        responses.ready = userText; 
        const response13 = sendMessageWithButtons(chatId, 'üîó *1Ô∏è‚É£4Ô∏è‚É£/16: –ß–∏ –º–∞—î—à —â–µ –∞–∫–∞—É–Ω—Ç–∏, —è–∫—ñ –º–æ–∂–Ω–∞ –∑–¥–∞—Ç–∏?*', [['‚úÖ –¢–∞–∫'], ['‚ùå –ù—ñ']], 'Markdown'); 
        const sentMessageId13 = response13 ? JSON.parse(response13.getContentText()).result.message_id : null;
        if (sentMessageId13) messageIds.push(sentMessageId13);
        props.setProperty(`messageIds_${chatId}`, JSON.stringify(messageIds));
        break;
      case 14: 
        responses.otherAccounts = userText; 
        const response14 = sendMessage(chatId, 'üí¨ *1Ô∏è‚É£5Ô∏è‚É£/16: –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä / –ø–∏—Ç–∞–Ω–Ω—è?* _–ú–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏._', false, 'Markdown'); 
        const sentMessageId14 = response14 ? JSON.parse(response14.getContentText()).result.message_id : null;
        if (sentMessageId14) messageIds.push(sentMessageId14);
        props.setProperty(`messageIds_${chatId}`, JSON.stringify(messageIds));
        break;
      case 15:
        responses.comment = userText;
        responses.timestamp = new Date().toLocaleString();
        Logger.log('Appending row to sheet');
        sheet.appendRow([
          responses.timestamp,
          responses.name,
          responses.age,
          responses.city,
          responses.telegram,
          responses.profession,
          responses.ageOfAcc,
          responses.phoneLinked,
          responses.realData,
          responses.selfie,
          responses.doc,
          responses.active,
          responses.blocked,
          responses.duration,
          responses.ready,
          responses.otherAccounts,
          responses.comment
        ]);
        Logger.log('Row appended');

        // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
        messageIds.forEach(msgId => {
          if (msgId > 0) {
            try {
              UrlFetchApp.fetch(`https://api.telegram.org/bot${TOKEN}/deleteMessage`, {
                method: 'post',
                contentType: 'application/json',
                payload: JSON.stringify({ chat_id: chatId, message_id: msgId })
              });
              Logger.log('Deleted message ID: ' + msgId);
            } catch (e) {
              Logger.log('Failed to delete message ID ' + msgId + ': ' + e.toString());
            }
          }
        });

        // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—ñ–¥–ø–∏—Å–∫—É
        const response15 = sendMessageWithButtons(chatId, 
          'üéâ *–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏!*\n' +
          `üì¢ –©–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≤–∞–∂–ª–∏–≤—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: [–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è](${CHANNEL_URL})\n` +
          '_–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ!_', 
          [['‚úÖ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è']], 'Markdown');
        props.deleteProperty(chatId);
        props.deleteProperty(`data_${chatId}`);
        props.deleteProperty(`messageIds_${chatId}`);
        Logger.log('Properties cleared');
        return;
    }
    step++;
    props.setProperty(chatId, step.toString());
    props.setProperty(`data_${chatId}`, JSON.stringify(responses));
    Logger.log('Step updated to: ' + step);
  } catch (error) {
    Logger.log('Error: ' + error.toString());
    return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: error.toString() }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}